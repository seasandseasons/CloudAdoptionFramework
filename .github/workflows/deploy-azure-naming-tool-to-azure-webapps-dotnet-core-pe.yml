# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a secret in your repository named AZURE_WEBAPP_NAME, and update the value to the name of your Azure App Service.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Azure Naming Tool - Build and deploy to an Azure Web App

env:
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '6.0.x'                 # set this to the .NET Core version to use

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:
  
defaults:
  run:
    working-directory: ready/AzNamingTool
    
permissions:
  contents: read
                
jobs:
  check-secrets:
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ready    
      outputs:
        secrets-valid: ${{ steps.secrets-valid.outputs.isvalid }}
      steps:
        - uses: actions/checkout@v3      
        - id: secrets-valid
          env: 
            azure-webapp-name: ${{ secrets.AZURE_WEBAPP_NAME }}
            azure-webapp-publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
            azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
            azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            azure-resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
            azure-webapp-uri: ${{ secrets.AZURE_WEBAPP_URI }}
            ACCOUNT: aznamingtooltestst  # Does not have to exist, this will be created for you
            CONTAINER: aznamingtooltest
            EXPIRY_TIME: 10 minutes
          if: (env.azure-webapp-name != null && env.azure-webapp-publish-profile != null && env.azure-credentials != null)
          run: echo 'isvalid=true' >> $GITHUB_OUTPUT
            
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ready/AzNamingTool    
    needs: [check-secrets]
    if: needs.check-secrets.outputs.secrets-valid == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy: 
    defaults:
      run:
        working-directory: ready/AzNamingTool 
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: [build,check-secrets]
    if: needs.check-secrets.outputs.secrets-valid == 'true'
    environment:
      name: 'Development'
      url: ${{ secrets.AZURE_WEBAPP_URI }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app
          
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Zip the app contents
        uses: papeloto/action-zip@v1
        with:
          files: .net-app.jar
          dest: .net-app.zip

      - name: Set SAS token expiration
        run: echo "expiry=`date -u -d "$EXPIRY_TIME" '+%Y-%m-%dT%H:%MZ'`" >> $GITHUB_ENV

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.19.1
          inlineScript: |
            az extension add --name webapp

            az storage account create   -n $ACCOUNT   -g $GROUP -l eastus2
            az storage container create -n $CONTAINER --account-name $ACCOUNT
            az storage blob upload      -f app.zip    --account-name $ACCOUNT -c $CONTAINER -n $ACCOUNT

            APP_URL=$(az storage blob generate-sas --full-uri --permissions r --expiry ${{ env.expiry }} --account-name $ACCOUNT -c $CONTAINER -n $ACCOUNT | xargs)

            az rest --method PUT \
            --uri ${{ secrets.AZURE_WEBAPP_URI }} \
            --body '{ 
                "properties": { 
                    "properties": {
                        "packageUri": "'"${APP_URL}"'"
                    }, 
                    "type": "zip",
                }
            }'

            az storage container delete -n $CONTAINER --account-name $ACCOUNT
